<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var filePath = Host.ResolvePath("../Data/SearchQueries.csv");
var csvRows = File.ReadAllLines(filePath).Skip(1).Select(line => line.Split(','));
var ruleBases = csvRows.Select(csvRow => new { new Uri(csvRow[0]).Host, Key = csvRow[1] }).Distinct();
var ruleGroups = ruleBases.GroupBy(ruleBase => ruleBase.Host);
var rules = ruleGroups.Select(ruleGroup => new { Host = ruleGroup.Key, Expressions = ruleGroup.Select(ruleBase => ruleBase.Key.StartsWith("=") ? ruleBase.Key.Substring(1) : $"GetSearchSimpleQuery(uri, \"{ruleBase.Key}\")") });
#>
#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System;
using System.IO;
using System.Linq;
using System.Web;

namespace MifuminLib.WellKnownUriParser
{
    public partial class SearchQueryPicker
    {
        /// <summary>
        /// URI から検索クエリを取得します。
        /// </summary>
        /// <param name="uri">URI。</param>
        /// <returns>検索クエリ。ない場合は <c>null</c>。</returns>
        public virtual string? FromUri(Uri uri)
        {
            switch (uri.Host)
            {
<# foreach (var rule in rules.OrderBy(rule => rule.Host)) { #>
                case "<#= rule.Host #>":
                    return <#= string.Join(" ?? ", rule.Expressions) #>;
<# } #>
                default:
                    break;
            }
            return null;
        }
    }
}
